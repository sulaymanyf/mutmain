import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get app_auto => "App Auto";
  String get app_cn => "中文";
  String get app_en => "English ";
  String get app_tr => "Turkish";
  String get asr => "Asr";
  String get boot_first => "There shall be no compulsion in [acceptance of] the religion.  \n    - [2:256]";
  String get boot_second => " This day I have perfected for you your religion and completed My favor upon you and have approved for you Islam as religion.    - [5:3]";
  String get boot_start => "Get Started";
  String get boot_third => " For indeed, with hardship [will be] ease.     - [94:5-6]";
  String get chapter => "chapter";
  String get current_prayer_time => "Next Prayer Time";
  String get current_time => "Current Time";
  String get dhur => "Dhur";
  String get dubai => "UAE";
  String get duha => "Duha";
  String get fajr => "Fajr";
  String get hadis => "Hadis";
  String get hanafi => "hanafi";
  String get isha => "Isha";
  String get karachi => "University of Islamic Sciences, Karachi";
  String get kuwait => "Kuwait";
  String get language => "Language";
  String get latlan => "Latitude and longitude";
  String get maghrib => "Maghrib";
  String get mecca => "Mecca";
  String get method => "Calculation Method";
  String get moonsightingCommittee => "Moonsighting Committee";
  String get muslimWorldLeague => "Muslim World League";
  String get next => "Next";
  String get prifile_name => "Good Person";
  String get qatar => "Qatar";
  String get quran => "Quran";
  String get salah => "Salah";
  String get sect => "Sect";
  String get setting => "setting";
  String get shafi => "shafi";
  String get singapore => "Singapore";
  String get startup_page => "boot page";
  String get stay_tuned => "Stay tuned";
  String get sunrise => "Sunrise";
  String get tahajjud => " Tahajjud";
  String get tehran => "Egyptian General Authority of Survey";
  String get ummAlQura => "Umm al-Qura University, Makkah";
  String get universal => "Universal";
}

class $en_US extends S {
  const $en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get next => "Next";
  @override
  String get chapter => "chapter";
  @override
  String get asr => "Asr";
  @override
  String get latlan => "Latitude and longitude";
  @override
  String get sunrise => "Sunrise";
  @override
  String get mecca => "Mecca";
  @override
  String get salah => "Salah";
  @override
  String get moonsightingCommittee => "Moonsighting Committee";
  @override
  String get language => "Language";
  @override
  String get boot_first => "There shall be no compulsion in [acceptance of] the religion.    - [2:256]";
  @override
  String get karachi => "University of Islamic Sciences, Karachi";
  @override
  String get dhur => "Dhur";
  @override
  String get setting => "setting";
  @override
  String get prifile_name => "Good Person";
  @override
  String get hadis => "Hadis";
  @override
  String get isha => "Isha";
  @override
  String get quran => "Quran";
  @override
  String get muslimWorldLeague => "Muslim World League";
  @override
  String get tehran => "Egyptian General Authority of Survey";
  @override
  String get startup_page => "boot page";
  @override
  String get stay_tuned => "Stay tuned";
  @override
  String get universal => "Universal";
  @override
  String get current_time => "Current Time";
  @override
  String get app_auto => "App Auto";
  @override
  String get current_prayer_time => "Next Prayer Time";
  @override
  String get maghrib => "Maghrib";
  @override
  String get kuwait => "Kuwait";
  @override
  String get ummAlQura => "Umm al-Qura University, Makkah";
  @override
  String get app_en => "English ";
  @override
  String get method => "Calculation Method";
  @override
  String get boot_second => " This day I have perfected for you your religion and completed My favor upon you and have approved for you Islam as religion.    - [5:3]";
  @override
  String get duha => "Duha";
  @override
  String get shafi => "shafi";
  @override
  String get fajr => "Fajr";
  @override
  String get app_cn => "中文";
  @override
  String get hanafi => "hanafi";
  @override
  String get dubai => "UAE";
  @override
  String get boot_start => "Get Started";
  @override
  String get tahajjud => " Tahajjud";
  @override
  String get singapore => "Singapore";
  @override
  String get qatar => "Qatar";
  @override
  String get boot_third => " For indeed, with hardship [will be] ease.     - [94:5-6]";
  @override
  String get sect => "Sect";
  @override
  String get app_tr => "Turkish";
}

class $tr_TR extends S {
  const $tr_TR();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get next => "Sonraki";
  @override
  String get chapter => "cüz";
  @override
  String get asr => "İkindi Namazı";
  @override
  String get latlan => "Enlem ve boylam";
  @override
  String get sunrise => "Güneş Doğuşu";
  @override
  String get mecca => "Mecca";
  @override
  String get salah => "Namazlar";
  @override
  String get moonsightingCommittee => "Moonsighting Komitesi";
  @override
  String get language => "Dil";
  @override
  String get boot_first => "Dinde zorlama yoktur; Artık hak ile batıl iyice ayrılmıştır.    - [2:256]";
  @override
  String get karachi => "İslami İlimler Üniversitesi, Karaçi";
  @override
  String get dhur => "Öğle Namazı";
  @override
  String get setting => "Ayarlar";
  @override
  String get prifile_name => "İyi Biri";
  @override
  String get hadis => "Hadis";
  @override
  String get isha => "Yatsı Namazı";
  @override
  String get quran => "Kur'an";
  @override
  String get muslimWorldLeague => "Müslüman Dünya Ligi";
  @override
  String get tehran => "Mısır Genel Araştırma Kurumu";
  @override
  String get startup_page => "Başlangıç sayfası";
  @override
  String get stay_tuned => "Bizi izlemeye devam edin";
  @override
  String get universal => "Universal";
  @override
  String get current_time => "Geçerli Saat";
  @override
  String get app_auto => "Uygulama Otomatik";
  @override
  String get current_prayer_time => "SonraKi Namaz Vakti";
  @override
  String get maghrib => "Akşam Namazı";
  @override
  String get ummAlQura => "Ümmü'l-Qura Üniversitesi, Mekke";
  @override
  String get app_en => "İngilizce";
  @override
  String get method => "Hesaplama Yöntemi";
  @override
  String get boot_second => "      Bugün, size dininizi bütünledim, üzerinize olan nimetimi tamamladım, din olarak sizin için İslam'ı beğendim.    - [5:3]";
  @override
  String get duha => "Duhâ (Kuşluk) Namazı ";
  @override
  String get shafi => "Şafiî";
  @override
  String get fajr => " Sabah Namazı";
  @override
  String get app_cn => "中文";
  @override
  String get hanafi => "Hanefi";
  @override
  String get dubai => "BAE";
  @override
  String get boot_start => "Başlat";
  @override
  String get tahajjud => " Teheccüd Namazı";
  @override
  String get singapore => "Singapur";
  @override
  String get boot_third => " Gerçekten, güçlükle beraber bir kolaylık vardır.     - [94:5]";
  @override
  String get sect => "Mezhep";
  @override
  String get app_tr => "Türkçe";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get chapter => "章";
  @override
  String get asr => "晡礼";
  @override
  String get latlan => "经纬度";
  @override
  String get sunrise => "日出";
  @override
  String get mecca => "麦加";
  @override
  String get salah => "礼拜";
  @override
  String get moonsightingCommittee => "月球监察委员会";
  @override
  String get language => "语言";
  @override
  String get boot_first => "对於宗教，绝无强迫；因为正邪确已分明了。    - [2:256]";
  @override
  String get karachi => "卡拉奇伊斯兰科学大学";
  @override
  String get dhur => "晌礼";
  @override
  String get setting => "设置";
  @override
  String get prifile_name => "一个好人";
  @override
  String get hadis => "圣训";
  @override
  String get isha => "宵礼";
  @override
  String get quran => "古兰经";
  @override
  String get muslimWorldLeague => "世界穆斯林联盟";
  @override
  String get tehran => "埃及测量总局";
  @override
  String get startup_page => "启动页";
  @override
  String get stay_tuned => "敬请期待";
  @override
  String get universal => "通用";
  @override
  String get current_time => "当前时间";
  @override
  String get app_auto => "跟随系统";
  @override
  String get current_prayer_time => "当前礼拜结束时间";
  @override
  String get maghrib => "昏礼";
  @override
  String get kuwait => "科威特";
  @override
  String get ummAlQura => "麦加乌姆古拉大学";
  @override
  String get app_en => "English ";
  @override
  String get method => "计算方法";
  @override
  String get boot_second => "  今天，我已为你们成全你们的宗教，我已完成我所赐你们的恩典，我已选择伊斯兰做你们的宗教。    - [5:3]";
  @override
  String get duha => "上午";
  @override
  String get shafi => "沙菲";
  @override
  String get fajr => "晨礼";
  @override
  String get app_cn => "中文";
  @override
  String get hanafi => "哈纳菲";
  @override
  String get dubai => "阿联酋";
  @override
  String get boot_start => "开始";
  @override
  String get tahajjud => "夜间拜";
  @override
  String get singapore => "新加坡";
  @override
  String get qatar => "卡塔尔";
  @override
  String get boot_third => " 与艰难相伴的，确是容易.     - [94:5]";
  @override
  String get sect => "学派";
  @override
  String get app_tr => "Turkish";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
      Locale("tr", "TR"),
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en_US":
          S.current = const $en_US();
          return SynchronousFuture<S>(S.current);
        case "tr_TR":
          S.current = const $tr_TR();
          return SynchronousFuture<S>(S.current);
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh_CN":
          S.current = const $zh_CN();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
